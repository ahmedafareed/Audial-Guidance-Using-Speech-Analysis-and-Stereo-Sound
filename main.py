"""Runner script that demonstrates the main notebook pipeline.

Usage: python main.py

This script is intentionally minimal: it loads a short text from
`Test_text_file.txt`, synthesizes speech (placeholder if Piper not present),
computes coordinates for a sample point, loads HRTF data (path must be set by
user), applies HRTF, and writes output files. Adjust paths in the `CONFIG`
section below.
"""
from src import tts, coords, hrtf
import os

CONFIG = {
    "text_file": "Test_text_file.txt",
    "tts_output": "tts_output.wav",
    "hrtf_base_dir": "./cipic_hrtf_database",
    "hrtf_subject": "003",
    # sample Cartesian coordinates for the sound source
    "source_coords": (1.0, 0.3, 0.1),
}


def main():
    # 1) Read text
    if os.path.exists(CONFIG["text_file"]):
        with open(CONFIG["text_file"], "r", encoding="utf-8") as f:
            text = f.read().strip()
    else:
        text = "This is a short test sentence generated by the pipeline."

    # 2) Generate TTS audio (may be a placeholder)
    tts_file = tts.text_to_speech_piper(text, CONFIG["tts_output"]) 

    # 3) Convert coordinates
    az, el, dist = coords.cartesian_to_spherical(*CONFIG["source_coords"]) 

    # 4) Load HRTF data (user must point to their CIPIC dataset root)
    try:
        hrtf_data = hrtf.load_hrtf_data(CONFIG["hrtf_base_dir"], CONFIG["hrtf_subject"]) 
    except Exception as e:
        print(f"[Main] Could not load HRTF data: {e}")
        hrtf_data = None

    # 5) Apply HRTF if possible
    if hrtf_data is not None and az is not None:
        out = hrtf.apply_hrtf(tts_file, az, el, hrtf_data)
        print(f"[Main] HRTF output: {out}")
    else:
        print("[Main] Skipping HRTF application")

if __name__ == "__main__":
    main()
